
apply plugin: "java"

apply from: "$rootDir/shared_styleguide.gradle"

dependencies {
    compile project("$coordinateGuiBase:CoordinateGuiCore")
    compile project("$coordinateGuiBase:CoordinateGuiCore2020")
    compile project("$coordinateGuiBase:CoordinateGuiWidgetCore")
    
    compile 'org.apache.logging.log4j:log4j-api:2.11.0'
    compile 'org.apache.logging.log4j:log4j-core:2.11.0'
    
    compile "org.openjfx:javafx-base:11:" + getJavaFxPlatform()
    compile "org.openjfx:javafx-graphics:11:" + getJavaFxPlatform()
    compile "org.openjfx:javafx-controls:11:" + getJavaFxPlatform()
    compile "org.openjfx:javafx-fxml:11:" + getJavaFxPlatform()
    
    
    compile 'edu.wpi.first.shuffleboard:shuffleboard:' + getShuffleboardVersion()
    compile 'edu.wpi.first.shuffleboard:api:' + getShuffleboardVersion()
    compile 'edu.wpi.first.shuffleboard.plugin:networktables:' + getShuffleboardVersion()
    compile 'edu.wpi.first.shuffleboard:api:' + getShuffleboardVersion()
    compile 'edu.wpi.first.shuffleboard.plugin:networktables:' + getShuffleboardVersion()
}


task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.baeldung.fatjar.Application'
    }
    baseName = 'CoordinateGuiShuffleboard2020'
    
    
    outputs.upToDateWhen {
        false
    }
    
    from configurations.compile.collect {
//        println "Compile: " + it
        if(it.toString().contains("org.apache.logging")) {
            FileTree filtered = zipTree(it).matching { unused ->
                exclude "org/apache/logging/log4j/core/appender/mom/kafka/KafkaManager*.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLogger.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler*.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor*.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler*.class"
                exclude "org/apache/logging/log4j/core/async/JCToolsBlockingQueueFactory*.class"
                exclude "org/apache/logging/log4j/core/async/RingBufferLogEvent*.class"
                exclude "org/apache/logging/log4j/core/net/SmtpManager*.class"
                exclude "org/apache/logging/log4j/core/layout/JacksonFactory*.class"
                exclude "org/apache/logging/log4j/core/jackson/*.class"
                exclude "org/apache/logging/log4j/core/osgi/*.class"
                exclude "org/apache/logging/log4j/util/Activator*.class"
                exclude "META-INF/**/*.class"
            }

            println "  Log4j: " + it
            filtered
        }
        else if(it.toString().startsWith("${rootDir}")) {
            println "  CoordinateGui: " + it
            zipTree(it)
        }
        else {
//            println "  Ignoring it"
            []
        }
    }
    
    with jar
}

task install_plugin(type: Copy) {
    from(tasks.named("customFatJar"))
    into("${System.getProperty("user.home")}/Shuffleboard/plugins")
}

////////////////////////////
// Generate Version Info
////////////////////////////
sourceSets.main.java.srcDir "${buildDir}/generated/java/"
task generate_version() {
    def generated_dir = file("$buildDir/generated/java/org/snobot/coordinate_gui/shuffleboard/infinite_recharge")
    generated_dir.mkdirs()
    def output_file = file("$generated_dir/PluginVersion.java")
    def file_template = """package org.snobot.coordinate_gui.shuffleboard.infinite_recharge;


public class PluginVersion
{
    public static final String VERSION = "${project.publishing_version}";
} 
"""
    
    doLast {
        if (output_file.exists()) {
            output_file.delete()
        }
        output_file.write(file_template)
    }
    
}
compileJava.dependsOn generate_version
////////////////////////////

publishing {
     repositories {
       maven {
           url publishing_url
//           if(project.findProperty("publishing_url")) {
//               credentials {
//                   username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
//                   password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")
//               }
//           }
       }
    }
    publications {
        application(MavenPublication) {
            groupId = "org.snobot.coordinate_gui"
            artifactId = "CoordinateGuiWidget2020"
            version = publishing_version
            
            artifact customFatJar
        }
    }
}
