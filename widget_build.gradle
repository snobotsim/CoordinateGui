
apply plugin: "java"



dependencies {
    implementation project("$coordinateGuiBase:CoordinateGuiCore")
    implementation project("$coordinateGuiBase:CoordinateGuiWidgetCore")

    implementation 'org.apache.logging.log4j:log4j-api:2.11.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.11.0'

    implementation "org.openjfx:javafx-base:11:" + getJavaFxPlatform()
    implementation "org.openjfx:javafx-graphics:11:" + getJavaFxPlatform()
    implementation "org.openjfx:javafx-controls:11:" + getJavaFxPlatform()
    implementation "org.openjfx:javafx-fxml:11:" + getJavaFxPlatform()

    implementation "edu.wpi.first.fieldImages:fieldImages-java:" + getWpilibVersion()
    implementation 'edu.wpi.first.shuffleboard:shuffleboard:' + getShuffleboardVersion()
    implementation 'edu.wpi.first.shuffleboard:api:' + getShuffleboardVersion()
}

////////////////////////////
// Generate Version Info
////////////////////////////
sourceSets.main.java.srcDir "${buildDir}/generated/java/"
sourceSets.main.java.srcDir "src/dashboard_gen/java/"
task generate_version() {
    def package_name = project.package_name
    def package_dir = package_name.replace(".", "/")
    def generated_dir = file("$buildDir/generated/java/" + package_dir)
    generated_dir.mkdirs()
    def output_file = file("$generated_dir/PluginVersion.java")
    def file_template = """package ${package_name};

public class PluginVersion
{
    public static final String VERSION = "${project.publishing_version}";
}
"""

    doLast {
        if (output_file.exists()) {
            output_file.delete()
        }
        output_file.write(file_template)
    }

}
compileJava.dependsOn generate_version
////////////////////////////


////////////////////////////////////////
// Publishing
////////////////////////////////////////
task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.baeldung.fatjar.Application'
    }
    baseName = project.base_name


    outputs.upToDateWhen {
        false
    }

    from configurations.compileClasspath.collect {
        //        println "Compile: " + it
        if(it.toString().contains("org.apache.logging")) {
            FileTree filtered = zipTree(it).matching { unused ->
                exclude "org/apache/logging/log4j/core/appender/mom/kafka/KafkaManager*.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLogger.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler*.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor*.class"
                exclude "org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler*.class"
                exclude "org/apache/logging/log4j/core/async/JCToolsBlockingQueueFactory*.class"
                exclude "org/apache/logging/log4j/core/async/RingBufferLogEvent*.class"
                exclude "org/apache/logging/log4j/core/net/SmtpManager*.class"
                exclude "org/apache/logging/log4j/core/layout/JacksonFactory*.class"
                exclude "org/apache/logging/log4j/core/jackson/*.class"
                exclude "org/apache/logging/log4j/core/osgi/*.class"
                exclude "org/apache/logging/log4j/util/Activator*.class"
                exclude "META-INF/**"
            }

            println "  Log4j: " + it
            filtered
        }
        else if(it.toString().startsWith("${rootDir}")) {
            println "  CoordinateGui: " + it
            zipTree(it)
        }
        else if (it.toString().contains("edu.wpi.first.fieldImages")) {
            println "  FieldImages: " + it
            zipTree(it)
        }
        else {
            println "  Ignoring it"  + it
            []
        }
    }

    with jar
}

task install_plugin(type: Copy) {
    from(tasks.named("customFatJar"))
    into("${System.getProperty("user.home")}/Shuffleboard/plugins")
}


publishing {
    repositories {
        maven {
            url publishing_url
        }
    }
    publications {
        application(MavenPublication) {
            groupId = "org.snobot.coordinate_gui"
            artifactId = project.base_name
            version = publishing_version

            artifact customFatJar
        }
    }
}
